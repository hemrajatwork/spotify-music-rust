{% extends "base" %}
{% block content %}
 <div class="row">
<div class="ms-3">
  <h3 class="mb-0 h4 font-weight-bolder">{{ pagename }}</h3>
  <p class="mb-4">
    {{ pagedetail }}
  </p>
</div>
<div class="row">
    <div class="col-md-12">
      <div class="card">
        <div class="card-body">
        <pre>
            We are using diesel crate to do CRUD operation with postgresql database.
            Diesel crate version being used is "2.2.0".
            Create models to use diesel ORM:
            1) SongInformationBase model - used to store raw data from csv file
            2) SongYouTubeDetail model - stored fetched youtube video id
            3) BackendTaskBase model - store status of backend task in our case store
             status of search youtube api and retrive youtube video id
        </pre>
        <pre>
            <code>
                #[derive(Queryable, Identifiable, Selectable, Serialize, Debug, PartialEq, QueryableByName)]
                #[diesel(primary_key(song_id))]
                #[diesel(table_name = song_information)]
                #[diesel(check_for_backend(diesel::pg::Pg))]
                pub struct SongInformationBase {
                    pub song_id: i32,
                    pub artist: String,
                    pub song: String,
                    pub text: String,
                    pub length: String,
                    pub emotion: String,
                    pub genre: String,
                    pub album: String,
                    pub release_date: String,
                    pub key: String,
                    pub tempo: f64,
                    pub loudness: f64,
                    pub time_signature: String,
                    pub explicit: String,
                    pub popularity: i32,
                    pub energy: i32,
                    pub danceability: i32,
                    pub positiveness: i32,
                    pub speechiness: i32,
                    pub liveness: i32,
                    pub acousticness: i32,
                    pub instrumentalness: i32,
                    pub good_for_party: bool,
                    pub good_for_work: bool,
                    pub good_for_relaxation: bool,
                    pub good_for_exercise: bool,
                    pub good_for_running: bool,
                    pub good_for_yoga: bool,
                    pub good_for_driving: bool,
                    pub good_for_social_gatherings: bool,
                    pub good_for_morning_routine: bool,
                    pub similar_artist_1: String,
                    pub similar_song_1: String,
                    pub similarity_score_1: f64,
                    pub similar_artist_2: String,
                    pub similar_song_2: String,
                    pub similarity_score_2: f64,
                    pub similar_artist_3: String,
                    pub similar_song_3: String,
                    pub similarity_score_3: f64,
                    pub unique_id: String,
                    pub created_at: Option<SystemTime>,
                    pub youtube_video: bool
                }

                #[derive(Queryable, Identifiable, Associations, Selectable, Serialize, Debug, Insertable, QueryableByName)]
                #[diesel(belongs_to(SongInformationBase, foreign_key=song_id))]
                #[diesel(table_name = song_youtube_detail)]
                #[diesel(primary_key(id))]
                pub struct SongYouTubeDetail{
                    pub id: Option<i32>,
                    pub song_id: i32,
                    pub youtube_link: String,
                    pub created_at: Option<SystemTime>
                }

                #[derive(Queryable, Selectable, Serialize, Debug)]
                #[diesel(table_name = backend_task)]
                #[diesel(primary_key(id))]
                pub struct BackendTaskBase{
                    pub id: i32,
                    pub task_name: String,
                    pub status: String,
                    pub created_at: Option<SystemTime>
                }
            </code>
        </pre>
        <pre>
        Apply Transfomation on raw csv data , number 1/0 to true/false for multiple fields.
        By providing custom serialize and de-serialize function.
        </pre>
        <pre>
            <code>
                mod NumerToBool{
                    use serde::{self, Deserialize, Serializer, Deserializer};
                    pub fn serialize<S>(
                        val: bool,
                        serializer: S,
                    ) -> Result<S::Ok, S::Error>
                    where
                        S: serde::ser::Serializer,
                    {
                        let new_val = match val{
                           false => 0,
                            true =>  1,
                            _ => panic!("value out of ra")
                        };
                        serializer.serialize_i32(new_val)
                    }

                    pub fn deserialize<'de, D>(
                        deserializer: D,
                    ) -> Result<bool, D::Error>
                    where
                        D: serde::de::Deserializer<'de>,
                    {
                        //let  boolean_val= i32::deserialize(deserializer);

                        match i32::deserialize(deserializer)?{
                            0=>Ok(false),
                            1=>Ok(true),
                            _=>Err(serde::de::Error::custom("failed"))
                        }
                        //let dt = NaiveDateTime::parse_from_str(&s, FORMAT).map_err(serde::de::Error::custom)?;
                        //return binary
                    }
                }
            </code>
        <pre>
        <pre>
            Auto Schema created with the help of diesel.
        </pre>
        <pre>
            <code>
                pub mod spotify_schema {
                    diesel::table! {
                        spotify_schema.backend_task (id) {
                            id -> Int4,
                            task_name -> Varchar,
                            status -> Varchar,
                            created_at -> Nullable<Timestamp>,
                        }
                    }

                    diesel::table! {
                        spotify_schema.song_information (song_id) {
                            song_id -> Int4,
                            artist -> Varchar,
                            song -> Varchar,
                            text -> Text,
                            length -> Varchar,
                            emotion -> Varchar,
                            genre -> Varchar,
                            album -> Varchar,
                            release_date -> Varchar,
                            key -> Varchar,
                            tempo -> Float8,
                            loudness -> Float8,
                            time_signature -> Varchar,
                            explicit -> Varchar,
                            popularity -> Int4,
                            energy -> Int4,
                            danceability -> Int4,
                            positiveness -> Int4,
                            speechiness -> Int4,
                            liveness -> Int4,
                            acousticness -> Int4,
                            instrumentalness -> Int4,
                            good_for_party -> Bool,
                            good_for_work -> Bool,
                            good_for_relaxation -> Bool,
                            good_for_exercise -> Bool,
                            good_for_running -> Bool,
                            good_for_yoga -> Bool,
                            good_for_driving -> Bool,
                            good_for_social_gatherings -> Bool,
                            good_for_morning_routine -> Bool,
                            similar_artist_1 -> Varchar,
                            similar_song_1 -> Varchar,
                            similarity_score_1 -> Float8,
                            similar_artist_2 -> Varchar,
                            similar_song_2 -> Varchar,
                            similarity_score_2 -> Float8,
                            similar_artist_3 -> Varchar,
                            similar_song_3 -> Varchar,
                            similarity_score_3 -> Float8,
                            unique_id -> Varchar,
                            created_at -> Nullable<Timestamp>,
                            youtube_video -> Bool,
                        }
                    }

                    diesel::table! {
                        spotify_schema.song_youtube_detail (id) {
                            id -> Int4,
                            song_id -> Int4,
                            youtube_link -> Varchar,
                            created_at -> Nullable<Timestamp>,
                        }
                    }

                    diesel::joinable!(song_youtube_detail -> song_information (song_id));

                    diesel::allow_tables_to_appear_in_same_query!(
                        backend_task,
                        song_information,
                        song_youtube_detail,
                    );
                }
            </code>
        </pre>
        </div>
      </div>
    </div>
</div>
{% endblock content %}